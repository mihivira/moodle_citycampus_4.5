{"version":3,"file":"imageboarddraganddrop.min.js","sources":["../src/imageboarddraganddrop.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import log from 'core/log';\n\nexport const init = () => {\n    // Create an array selectedImage to be able to store some data about the selected image that is moved.\n    let selectedImage = {};\n    selectedImage.number = null;\n    selectedImage.number = null;\n    selectedImage.src = '';\n    // ItemToMove is the div that the selected image is inside AND the title. We do NOT move the image we move the itemtomove-div.\n    selectedImage.itemToMove = null;\n    // ToDo: Add documentation about xoffset?\n    selectedImage.eventlayerX = 0;\n    selectedImage.eventlayerY = 0;\n    selectedImage.width = null;\n    selectedImage.height = null;\n    selectedImage.titlecorrectorX = 0;\n    selectedImage.titlecorrectorY = 0;\n\n    // Store the data about the canvas/background.\n    let canvas = null;\n    let canvaswidth = 600;\n    let canvasheight = 400;\n\n    registerDnDListener();\n\n    /**\n     *  We need two event listeners for drag and drop. One when the dragging starts and one when it ends.\n     */\n    function registerDnDListener() {\n        refreshCanvasSize();\n        canvas.addEventListener(\"dragstart\", dragStart, false);\n        canvas.addEventListener(\"dragend\", dragEnd, false);\n        document.addEventListener(\"canvaschanged\", refreshCanvasSize);\n    }\n\n    /**\n     * Update canvas size. So drag and drop has new boundaries.\n     */\n    function refreshCanvasSize() {\n        canvas = document.getElementById(\"unilabel-imageboard-background-canvas\");\n        canvaswidth = canvas.clientWidth;\n        canvasheight = canvas.clientHeight;\n    }\n\n    /**\n     *\n     * @param {event} event\n     */\n    function dragStart(event) {\n        // Check if title or image is selected because this leads to different offsets.\n        // We have to do different calculation of x and y position.\n        let selectedType = \"nix\";\n        if (event &&\n            event.explicitOriginalTarget &&\n            event.explicitOriginalTarget.classList &&\n            event.explicitOriginalTarget.classList.contains('unilabel-imageboard-image')) {\n            selectedType = \"image\";\n        } else {\n            selectedType = \"title\";\n        }\n        // ToDo: Check this condition ....  shouldnt it check         selectedType = \"image\"\n        if (event && event.target && event.target.classList.contains('unilabel-imageboard-element-draggable')) {\n            // Image was selected, so we have to store the information about this image.\n            // 1. Get the number of the selected element.\n            let number = event.target.getAttribute('id').split('unilabel-imageboard-element-')[1];\n            // 2. Get imagedata of the selected element.\n            let imagedata = getAllImagedataFromForm(number);\n            // 3. Set the number of the selected image so this image can be updated when dragEnds.\n            selectedImage.number = number;\n            // 4. Collect the other information.\n            selectedImage.title = imagedata.title;\n            selectedImage.titlelineheight = imagedata.titlelineheight;\n            selectedImage.fontsize = imagedata.fontsize;\n            selectedImage.width = imagedata.targetwidth;\n            selectedImage.height = imagedata.targetheight;\n            selectedImage.itemToMove = document.getElementById('unilabel-imageboard-element-' + selectedImage.number);\n            // Attention: layerX and layerY is the relative position of the mouseposition inside div.\n            // So div is the image or the title and the layer depends on this according to the complete element.\n            selectedImage.eventlayerX = event.layerX;\n            selectedImage.eventlayerY = event.layerY;\n            if (selectedType == \"title\") {\n                // If a title is selected then the position is relative to the upper left corner of the title. Thus we\n                // have to use a correction-value because we store the coordinates that belong to the image.\n                selectedImage.titlecorrectorY = selectedImage.fontsize * selectedImage.titlelineheight;\n            } else {\n                selectedImage.titlecorrectorY = 0;\n            }\n        }\n    }\n\n    /**\n     * At the end of drag update the inputfield and set the coordinates into the attribute of the image.\n     *\n     * @param {event} event\n     */\n    function dragEnd(event) {\n        let snap = 1;\n        let snapelement = document.getElementById('unilabeltype-imageboard-snap');\n        if (snapelement !== null && Number.isInteger(Number(snapelement.value))) {\n            snap = snapelement.value;\n        }\n\n        if (selectedImage.number !== null) {\n            // Information: snap is an integer and allows to use an snapping grid.\n            // xposition = 123 with snap 10 will be calculated to 120.\n            // xposition = 123 with snap 100 will be calculated to 10.\n            let xposition = calculateXposition(event, snap);\n            let yposition = calculateYposition(event, snap);\n            selectedImage.itemToMove.style.left = xposition + selectedImage.titlecorrectorX + \"px\";\n            selectedImage.itemToMove.style.top = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY) + \"px\";\n\n            // Change the inputfield.\n            const inputPositionX = document.getElementById('id_unilabeltype_imageboard_xposition_' + (selectedImage.number));\n            inputPositionX.value = xposition;\n\n            const inputPositionY = document.getElementById('id_unilabeltype_imageboard_yposition_' + (selectedImage.number));\n            inputPositionY.value = parseInt(yposition) + parseInt(selectedImage.titlecorrectorY);\n\n            let coordinates = document.getElementById('unilabel-imageboard-coordinates-' + selectedImage.number);\n            coordinates.innerHTML = (parseInt(selectedImage.number) + 1) + \": \" +\n                inputPositionX.value + \" / \" + inputPositionY.value;\n\n            // Reset saved image data\n            selectedImage.number = null;\n            selectedImage.titlecorrectorY = 0;\n        }\n    }\n\n    /**\n     * Get all data from image that is stored in the form and collects them in one array.\n     *\n     * @param {int} number of the image\n     * @returns {*[]} Array with the collected information that are set in the form for the image.\n     */\n    function getAllImagedataFromForm(number) {\n        let imageids = {\n            title: 'id_unilabeltype_imageboard_title_' + number,\n            titlecolor: 'id_unilabeltype_imageboard_titlecolor_colourpicker',\n            titlebackgroundcolor: 'id_unilabeltype_imageboard_titlebackgroundcolor_colourpicker',\n            titlelineheight: 'id_unilabeltype_imageboard_titlelineheight',\n            fontsize: 'id_unilabeltype_imageboard_fontsize',\n            xposition: 'id_unilabeltype_imageboard_xposition_' + number,\n            yposition: 'id_unilabeltype_imageboard_yposition_' + number,\n            targetwidth: 'id_unilabeltype_imageboard_targetwidth_' + number,\n            targetheight: 'id_unilabeltype_imageboard_targetheight_' + number,\n            src: '',\n            border: 'id_unilabeltype_imageboard_border_' + number,\n            borderradius: 'id_unilabeltype_imageboard_borderradius_' + number,\n        };\n\n        let imagedata = {};\n        imagedata.title = document.getElementById(imageids.title).value;\n        imagedata.titlecolor = document.getElementById(imageids.titlecolor).value;\n        imagedata.titlebackgroundcolor = document.getElementById(imageids.titlebackgroundcolor).value;\n        imagedata.titlelineheight = document.getElementById(imageids.titlelineheight).value;\n        imagedata.fontsize = document.getElementById(imageids.fontsize).value;\n        imagedata.xposition = document.getElementById(imageids.xposition).value;\n        imagedata.yposition = document.getElementById(imageids.yposition).value;\n        imagedata.targetwidth = document.getElementById(imageids.targetwidth).value;\n        imagedata.targetheight = document.getElementById(imageids.targetheight).value;\n\n        // Src der Draftfile ermitteln.\n        const element = document.getElementById('id_unilabeltype_imageboard_image_' + number + '_fieldset');\n        const imagetag = element.getElementsByTagName('img');\n        let src = '';\n        if (imagetag.length && imagetag.length != 0) {\n            src = imagetag[0].src;\n            src = src.split('?')[0];\n        }\n        imagedata.src = src;\n        imagedata.border = document.getElementById(imageids.border).value;\n        imagedata.borderradius = document.getElementById(imageids.borderradius).value;\n\n        return imagedata;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @param {int} snap\n     * @returns {number}\n     */\n    function calculateXposition(event, snap) {\n        let canvasboundings = canvas.getBoundingClientRect();\n        let xposition = event.clientX - canvasboundings.left - selectedImage.eventlayerX;\n\n        if (xposition < 0) {\n            xposition = 0;\n        }\n        if (xposition >= canvaswidth - selectedImage.width) {\n            xposition = canvaswidth - selectedImage.width;\n        }\n        return Math.round(xposition / snap) * snap;\n    }\n\n    /**\n     *\n     * @param {event} event\n     * @param {int} snap\n     * @returns {number}\n     */\n    function calculateYposition(event, snap) {\n        var canvasboundings = canvas.getBoundingClientRect();\n        var yposition = event.clientY - canvasboundings.top - selectedImage.eventlayerY;\n        if (yposition < 0) {\n            yposition = 0;\n        }\n        if (yposition >= canvasheight - selectedImage.height) {\n            yposition = canvasheight - selectedImage.height;\n        }\n        return Math.round(yposition / snap) * snap;\n    }\n};\n"],"names":["selectedImage","number","src","itemToMove","eventlayerX","eventlayerY","width","height","titlecorrectorX","titlecorrectorY","canvas","canvaswidth","canvasheight","refreshCanvasSize","document","getElementById","clientWidth","clientHeight","dragStart","event","selectedType","explicitOriginalTarget","classList","contains","target","getAttribute","split","imagedata","imageids","title","titlecolor","titlebackgroundcolor","titlelineheight","fontsize","xposition","yposition","targetwidth","targetheight","border","borderradius","value","imagetag","getElementsByTagName","length","getAllImagedataFromForm","layerX","layerY","dragEnd","snap","snapelement","Number","isInteger","canvasboundings","getBoundingClientRect","clientX","left","Math","round","calculateXposition","clientY","top","calculateYposition","style","parseInt","inputPositionX","inputPositionY","innerHTML","addEventListener"],"mappings":"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"}